public class Creative_45 {

    // Performs push operations for digits and pop operations for "-" 
    public static void generateFromSequence(String[] sequence) {
        Stack<String> stack = new Stack<>();
        for (String s : sequence) 
        {
            if (s.equals("-"))
            {
                if (stack.isEmpty()) throw new IndexOutOfBoundsException("Stack underflow");
                else System.out.print(stack.pop() + " "); 
            }
            else stack.push(s);
        }
        System.out.println();
    }

    public static boolean underflows(String[] sequence) {
        int x = 0;
        for (String s : sequence) 
        {
            if (s.equals("-"))
            {
                if (--x < 0) return false;
            } 
            else x++;
        }
        return true;
    }

    // Handle case when stack is empty and peek() returns a null
    private static int intOf(Integer x) {
        return (x == null) ? -1 : x;
    }

    // We will assume the argument contains each digit from 0 to N - 1 exactly once
    public static boolean isValidPermutation(int[] permutation) {
        int digit = 0;
        Stack<Integer> stack = new Stack<>();
        int i = 0;

        while (digit <= permutation.length && i < permutation.length)
        {
            if (intOf(stack.peek()) == permutation[i]) 
            {
                stack.pop();
                i++;
            }
            else stack.push(digit++);
        }
        return stack.isEmpty();
    }

    // Just for showing how to generate the permutation
    // I separated it from isValidPermutation so that the algorithm above is easy to understand
    public static String[] permutationInputSequence(int[] permutation) {
        int digit = 0;
        Stack<Integer> stack = new Stack<>();
        int i = 0;

        String[] sequence = new String[permutation.length * 2];
        int sequenceIndex = 0;

        while (digit <= permutation.length && i < permutation.length)
        {
            if (intOf(stack.peek()) == permutation[i]) 
            {
                stack.pop();
                sequence[sequenceIndex++] = "-";
                i++;
            }
            else 
            {
                sequence[sequenceIndex++] = String.valueOf(digit);
                stack.push(digit++);
            }
        }
        return sequence;
    }

    public static void main(String[] args) {
        int[] permutation = new int[args.length];

        for (int i = 0; i < args.length; i++) permutation[i] = Integer.parseInt(args[i]); 
        
        if (isValidPermutation(permutation)) 
        {
            System.out.println("The permutation can be generated by the sequence:");
            String[] seq = permutationInputSequence(permutation);
            for (String s : seq) System.out.print(s + " ");
            System.out.println();

            System.out.println("The sequence produces the output: ");
            generateFromSequence(seq);
        }
        else System.out.println("Invalid Permutation!");
    }
}
